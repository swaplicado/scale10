/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package scale.mod.ope.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import scale.mod.SModConsts;
import scale.mod.SModSysConsts;
import scale.mod.ope.db.SDbUser;

/**
 *
 * @author Sergio Flores
 */
public class SFormUser extends SBeanForm implements ActionListener {

    private SDbUser moRegistry;

    /**
     * Creates new form SFormLocality
     */
    public SFormUser(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.OU_USR, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel6 = new javax.swing.JPanel();
        jlPassword = new javax.swing.JLabel();
        moPswdPassword = new sa.lib.gui.bean.SBeanFieldPassword();
        jbEditPassword = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jlPasswordConfirm = new javax.swing.JLabel();
        moPswdPasswordConfirm = new sa.lib.gui.bean.SBeanFieldPassword();
        jPanel5 = new javax.swing.JPanel();
        jlUserType = new javax.swing.JLabel();
        moKeyUserType = new sa.lib.gui.bean.SBeanFieldKey();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlName.setForeground(new java.awt.Color(0, 102, 102));
        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlName);

        moTextName.setText("TEXT");
        jPanel4.add(moTextName);

        jPanel2.add(jPanel4);

        jPanel6.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlPassword.setText("Contrase√±a:");
        jlPassword.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlPassword);

        moPswdPassword.setText("sBeanFieldPassword1");
        jPanel6.add(moPswdPassword);

        jbEditPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scale/gui/img/ico_std_edt.gif"))); // NOI18N
        jbEditPassword.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbEditPassword);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlPasswordConfirm.setText("Confirmar:");
        jlPasswordConfirm.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlPasswordConfirm);

        moPswdPasswordConfirm.setText("sBeanFieldPassword1");
        jPanel7.add(moPswdPasswordConfirm);

        jPanel2.add(jPanel7);

        jPanel5.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlUserType.setText("Tipo usuario:*");
        jlUserType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlUserType);

        moKeyUserType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moKeyUserType);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbEditPassword;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlPassword;
    private javax.swing.JLabel jlPasswordConfirm;
    private javax.swing.JLabel jlUserType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUserType;
    private sa.lib.gui.bean.SBeanFieldPassword moPswdPassword;
    private sa.lib.gui.bean.SBeanFieldPassword moPswdPasswordConfirm;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 400, 250);

        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName), 50);
        moTextName.setTextCaseType(SLibConsts.UNDEFINED);
        moPswdPassword.setTextSettings(SGuiUtils.getLabelName(jlPassword), 50);
        moPswdPasswordConfirm.setTextSettings(SGuiUtils.getLabelName(jlPasswordConfirm), 50);
        moKeyUserType.setKeySettings(miClient, SGuiUtils.getLabelName(jlUserType), true);

        moFields.addField(moTextName);
        moFields.addField(moPswdPassword);
        moFields.addField(moPswdPasswordConfirm);
        moFields.addField(moKeyUserType);

        moFields.setFormButton(jbSave);
    }

    /*
     * Public methods
     */

    public void actionEditPassword() {
        if (jbEditPassword.isEnabled()) {
            jbEditPassword.setEnabled(false);
            moPswdPassword.setEditable(true);
            moPswdPasswordConfirm.setEditable(true);
            moPswdPassword.requestFocus();
        }
    }

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbEditPassword.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbEditPassword.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyUserType, SModConsts.OS_USR_TP, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbUser) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            if (moRegistry.getFkUserTypeId() == SLibConsts.UNDEFINED) {
                moRegistry.setFkUserTypeId(SModSysConsts.OS_USR_TP_USR);
            }
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextName.setValue(moRegistry.getName());
        moPswdPassword.setValue("");
        moPswdPasswordConfirm.setValue("");
        moKeyUserType.setValue(new int[] { moRegistry.getFkUserTypeId() });

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            moPswdPassword.setEditable(true);
            moPswdPasswordConfirm.setEditable(true);
            jbEditPassword.setEnabled(false);
        }
        else {
            moPswdPassword.setEditable(false);
            moPswdPasswordConfirm.setEditable(false);
            jbEditPassword.setEnabled(true);
        }


        addAllListeners();
    }

    @Override
    public SDbUser getRegistry() throws Exception {
        SDbUser registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setName(moTextName.getValue());
        if (moPswdPassword.isEditable()) {
            registry.setPassword(moPswdPassword.getValue());
        }
        registry.setFkUserTypeId(moKeyUserType.getValue()[0]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moPswdPassword.getValue().compareTo(moPswdPasswordConfirm.getValue()) != 0) {
                moPswdPassword.setValue("");
                moPswdPasswordConfirm.setValue("");
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlPassword) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + "'" + SGuiUtils.getLabelName(jlPasswordConfirm) + "'.");
                validation.setComponent(moPswdPassword);
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbEditPassword) {
                actionEditPassword();
            }
        }
    }
}
