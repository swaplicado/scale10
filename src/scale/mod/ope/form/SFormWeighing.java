/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package scale.mod.ope.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldDecimal;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanForm;
import scale.gui.SGuiDaemonWeight;
import scale.gui.SGuiSerialPortListener;
import scale.mod.SModConsts;
import scale.mod.ope.db.SDbConfig;
import scale.mod.ope.db.SDbItem;
import scale.mod.ope.db.SDbPayment;
import scale.mod.ope.db.SDbSupplier;
import scale.mod.ope.db.SDbWeighing;
import scale.mod.ope.db.SOpeConsts;
import scale.mod.ope.db.SOpeUtils;

/**
 *
 * @author Sergio Flores
 */
public class SFormWeighing extends SBeanForm implements ActionListener, ItemListener, FocusListener {

    private SDbWeighing moRegistry;
    private SDbConfig moConfig;
    private boolean mbCanEditPriceUnitary;
    private SGuiDaemonWeight moDaemonWeight;
    private SGuiSerialPortListener moSerialPortListener;

    /**
     * Creates new form SFormLocality
     */
    public SFormWeighing(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.O_WEI, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel4 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moIntNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel9 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlSupplier = new javax.swing.JLabel();
        moKeySupplier = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlLocality = new javax.swing.JLabel();
        moKeyLocality = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        jlNotes = new javax.swing.JLabel();
        moTextNotes = new sa.lib.gui.bean.SBeanFieldText();
        jPanel11 = new javax.swing.JPanel();
        jlNotesOnDelete = new javax.swing.JLabel();
        moTextNotesOnDelete = new sa.lib.gui.bean.SBeanFieldText();
        jPanel24 = new javax.swing.JPanel();
        jckPayed = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        jckDisabled = new javax.swing.JCheckBox();
        jPanel23 = new javax.swing.JPanel();
        jckDeleted = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jlScale = new javax.swing.JLabel();
        jtfScale = new javax.swing.JTextField();
        jPanel27 = new javax.swing.JPanel();
        jlWeightGrossSystem = new javax.swing.JLabel();
        moCompWeightGrossSystem = new sa.lib.gui.bean.SBeanCompoundField();
        jbSetWeightGrossSystem = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jlWeightGross = new javax.swing.JLabel();
        moCompWeightGross = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel14 = new javax.swing.JPanel();
        jlQuantityCage = new javax.swing.JLabel();
        moCompQuantityCage = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel15 = new javax.swing.JPanel();
        jlWeightCage = new javax.swing.JLabel();
        moCompWeightCage = new sa.lib.gui.bean.SBeanCompoundField();
        jlWeightCageUnitary = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jlWeightPallet = new javax.swing.JLabel();
        moCompWeightPallet = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel17 = new javax.swing.JPanel();
        jlWeightNet_r = new javax.swing.JLabel();
        moCompWeightNet_r = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel18 = new javax.swing.JPanel();
        jlPriceUnitary = new javax.swing.JLabel();
        moCurPriceUnitary = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel19 = new javax.swing.JPanel();
        jlTotal_r = new javax.swing.JLabel();
        moCurTotal_r = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel21 = new javax.swing.JPanel();
        jlPayments = new javax.swing.JLabel();
        moCurPayments = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel22 = new javax.swing.JPanel();
        jlBalance = new javax.swing.JLabel();
        moCurBalance = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel20 = new javax.swing.JPanel();
        jlPayment = new javax.swing.JLabel();
        moCurPayment = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jbPayBalance = new javax.swing.JButton();
        jPanel25 = new javax.swing.JPanel();
        jlBalanceNew = new javax.swing.JLabel();
        moCurBalanceNew = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        moBoolPrintOnSave = new sa.lib.gui.bean.SBeanFieldBoolean();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(1, 2));

        jPanel2.setLayout(new java.awt.GridLayout(14, 0, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlDate.setText("Fecha boleto:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDate);
        jPanel3.add(moDateDate);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlNumber.setText("Folio boleto:");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlNumber);

        moIntNumber.setEditable(false);
        jPanel4.add(moIntNumber);

        jPanel2.add(jPanel4);

        jPanel9.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlItem.setText("Producto:*");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel9.add(moKeyItem);

        jPanel2.add(jPanel9);

        jPanel7.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlSupplier.setText("Proveedor:*");
        jlSupplier.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlSupplier);

        moKeySupplier.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(moKeySupplier);

        jPanel2.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlLocality.setText("Localidad:*");
        jlLocality.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlLocality);

        moKeyLocality.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(moKeyLocality);

        jPanel2.add(jPanel8);

        jPanel10.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlNotes.setText("Notas:");
        jlNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlNotes);

        moTextNotes.setText("TEXT");
        moTextNotes.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel10.add(moTextNotes);

        jPanel2.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlNotesOnDelete.setText("Notas eliminación:*");
        jlNotesOnDelete.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlNotesOnDelete);

        moTextNotesOnDelete.setText("TEXT");
        moTextNotesOnDelete.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel11.add(moTextNotesOnDelete);

        jPanel2.add(jPanel11);

        jPanel24.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jckPayed.setText("Cerrado para pago");
        jckPayed.setEnabled(false);
        jckPayed.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel24.add(jckPayed);

        jPanel2.add(jPanel24);

        jPanel12.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jckDisabled.setText("Cancelado");
        jckDisabled.setEnabled(false);
        jckDisabled.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel12.add(jckDisabled);

        jPanel2.add(jPanel12);

        jPanel23.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jckDeleted.setText("Eliminado");
        jckDeleted.setEnabled(false);
        jckDeleted.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel23.add(jckDeleted);

        jPanel2.add(jPanel23);

        jPanel5.add(jPanel2);

        jPanel6.setLayout(new java.awt.GridLayout(14, 0, 0, 5));

        jPanel28.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlScale.setText("Lectura báscula:");
        jlScale.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jlScale);

        jtfScale.setEditable(false);
        jtfScale.setText("TEXT");
        jtfScale.setFocusable(false);
        jtfScale.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jtfScale);

        jPanel6.add(jPanel28);

        jPanel27.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlWeightGrossSystem.setText("Peso báscula:");
        jlWeightGrossSystem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlWeightGrossSystem);

        moCompWeightGrossSystem.setEditable(false);
        jPanel27.add(moCompWeightGrossSystem);

        jbSetWeightGrossSystem.setText("Fijar");
        jbSetWeightGrossSystem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel27.add(jbSetWeightGrossSystem);

        jPanel6.add(jPanel27);

        jPanel13.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlWeightGross.setText("Peso bruto:*");
        jlWeightGross.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlWeightGross);
        jPanel13.add(moCompWeightGross);

        jPanel6.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlQuantityCage.setText("Núm. cajas:");
        jlQuantityCage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlQuantityCage);
        jPanel14.add(moCompQuantityCage);

        jPanel6.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlWeightCage.setText("Peso cajas:");
        jlWeightCage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlWeightCage);

        moCompWeightCage.setEditable(false);
        jPanel15.add(moCompWeightCage);

        jlWeightCageUnitary.setText("TEXT");
        jlWeightCageUnitary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlWeightCageUnitary);

        jPanel6.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlWeightPallet.setText("Peso tarimas:");
        jlWeightPallet.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlWeightPallet);
        jPanel16.add(moCompWeightPallet);

        jPanel6.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlWeightNet_r.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlWeightNet_r.setText("Peso neto:");
        jlWeightNet_r.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlWeightNet_r);

        moCompWeightNet_r.setEditable(false);
        jPanel17.add(moCompWeightNet_r);

        jPanel6.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlPriceUnitary.setText("Precio unitario:");
        jlPriceUnitary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlPriceUnitary);
        jPanel18.add(moCurPriceUnitary);

        jPanel6.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlTotal_r.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlTotal_r.setText("Total:");
        jlTotal_r.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlTotal_r);

        moCurTotal_r.setEditable(false);
        jPanel19.add(moCurTotal_r);

        jPanel6.add(jPanel19);

        jPanel21.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlPayments.setText("Pagos:");
        jlPayments.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlPayments);

        moCurPayments.setEditable(false);
        jPanel21.add(moCurPayments);

        jPanel6.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlBalance.setText("Saldo:");
        jlBalance.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlBalance);

        moCurBalance.setEditable(false);
        jPanel22.add(moCurBalance);

        jPanel6.add(jPanel22);

        jPanel20.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlPayment.setText("Pago:");
        jlPayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlPayment);
        jPanel20.add(moCurPayment);

        jbPayBalance.setText("Pagar");
        jbPayBalance.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jbPayBalance);

        jPanel6.add(jPanel20);

        jPanel25.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlBalanceNew.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlBalanceNew.setText("Saldo nuevo:");
        jlBalanceNew.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlBalanceNew);

        moCurBalanceNew.setEditable(false);
        jPanel25.add(moCurBalanceNew);

        jPanel6.add(jPanel25);

        moBoolPrintOnSave.setText("Imprimir al guardar");
        jPanel6.add(moBoolPrintOnSave);

        jPanel5.add(jPanel6);

        jPanel1.add(jPanel5, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        windowClosed();
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbPayBalance;
    private javax.swing.JButton jbSetWeightGrossSystem;
    private javax.swing.JCheckBox jckDeleted;
    private javax.swing.JCheckBox jckDisabled;
    private javax.swing.JCheckBox jckPayed;
    private javax.swing.JLabel jlBalance;
    private javax.swing.JLabel jlBalanceNew;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlLocality;
    private javax.swing.JLabel jlNotes;
    private javax.swing.JLabel jlNotesOnDelete;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPayment;
    private javax.swing.JLabel jlPayments;
    private javax.swing.JLabel jlPriceUnitary;
    private javax.swing.JLabel jlQuantityCage;
    private javax.swing.JLabel jlScale;
    private javax.swing.JLabel jlSupplier;
    private javax.swing.JLabel jlTotal_r;
    private javax.swing.JLabel jlWeightCage;
    private javax.swing.JLabel jlWeightCageUnitary;
    private javax.swing.JLabel jlWeightGross;
    private javax.swing.JLabel jlWeightGrossSystem;
    private javax.swing.JLabel jlWeightNet_r;
    private javax.swing.JLabel jlWeightPallet;
    private javax.swing.JTextField jtfScale;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolPrintOnSave;
    private sa.lib.gui.bean.SBeanCompoundField moCompQuantityCage;
    private sa.lib.gui.bean.SBeanCompoundField moCompWeightCage;
    private sa.lib.gui.bean.SBeanCompoundField moCompWeightGross;
    private sa.lib.gui.bean.SBeanCompoundField moCompWeightGrossSystem;
    private sa.lib.gui.bean.SBeanCompoundField moCompWeightNet_r;
    private sa.lib.gui.bean.SBeanCompoundField moCompWeightPallet;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurBalance;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurBalanceNew;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurPayment;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurPayments;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurPriceUnitary;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurTotal_r;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumber;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyLocality;
    private sa.lib.gui.bean.SBeanFieldKey moKeySupplier;
    private sa.lib.gui.bean.SBeanFieldText moTextNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextNotesOnDelete;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);

        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moIntNumber.setIntegerSettings(SGuiUtils.getLabelName(jlNumber), SGuiConsts.GUI_TYPE_INT_RAW, true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), true);
        moKeySupplier.setKeySettings(miClient, SGuiUtils.getLabelName(jlSupplier), true);
        moKeyLocality.setKeySettings(miClient, SGuiUtils.getLabelName(jlLocality), true);
        moTextNotes.setTextSettings(SGuiUtils.getLabelName(jlNotes), 100, 0);
        moTextNotesOnDelete.setTextSettings(SGuiUtils.getLabelName(jlNotesOnDelete), 100);
        moCompWeightGrossSystem.setCompoundFieldSettings(miClient);
        moCompWeightGrossSystem.setCompoundText(SOpeConsts.KG);
        moCompWeightGrossSystem.getField().setDecimalSettings(SGuiUtils.getLabelName(jlWeightGrossSystem), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompWeightGross.setCompoundFieldSettings(miClient);
        moCompWeightGross.setCompoundText(SOpeConsts.KG);
        moCompWeightGross.getField().setDecimalSettings(SGuiUtils.getLabelName(jlWeightGross), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompQuantityCage.setCompoundFieldSettings(miClient);
        moCompQuantityCage.setCompoundText(SOpeConsts.PCE);
        moCompQuantityCage.getField().setDecimalSettings(SGuiUtils.getLabelName(jlQuantityCage), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompWeightCage.setCompoundFieldSettings(miClient);
        moCompWeightCage.setCompoundText(SOpeConsts.KG);
        moCompWeightCage.getField().setDecimalSettings(SGuiUtils.getLabelName(jlWeightCage), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompWeightPallet.setCompoundFieldSettings(miClient);
        moCompWeightPallet.setCompoundText(SOpeConsts.KG);
        moCompWeightPallet.getField().setDecimalSettings(SGuiUtils.getLabelName(jlWeightPallet), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompWeightNet_r.setCompoundFieldSettings(miClient);
        moCompWeightNet_r.setCompoundText(SOpeConsts.KG);
        moCompWeightNet_r.getField().setDecimalSettings(SGuiUtils.getLabelName(jlWeightNet_r), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCurPriceUnitary.setCompoundFieldSettings(miClient);
        moCurPriceUnitary.getField().setDecimalSettings(SGuiUtils.getLabelName(jlPriceUnitary), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moCurTotal_r.setCompoundFieldSettings(miClient);
        moCurTotal_r.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotal_r), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurPayments.setCompoundFieldSettings(miClient);
        moCurPayments.getField().setDecimalSettings(SGuiUtils.getLabelName(jlPayments), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurBalance.setCompoundFieldSettings(miClient);
        moCurBalance.getField().setDecimalSettings(SGuiUtils.getLabelName(jlBalance), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurPayment.setCompoundFieldSettings(miClient);
        moCurPayment.getField().setDecimalSettings(SGuiUtils.getLabelName(jlPayment), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurBalanceNew.setCompoundFieldSettings(miClient);
        moCurBalanceNew.getField().setDecimalSettings(SGuiUtils.getLabelName(jlBalanceNew), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moBoolPrintOnSave.setBooleanSettings(SGuiUtils.getLabelName(moBoolPrintOnSave.getText()), true);

        moFields.addField(moDateDate);
        //moFields.addField(moIntNumber);
        moFields.addField(moKeyItem);
        moFields.addField(moKeySupplier);
        moFields.addField(moKeyLocality);
        moFields.addField(moTextNotes);
        moFields.addField(moTextNotesOnDelete);
        //moFields.addField(moCompWeightGrossSystem.getField());
        moFields.addField(moCompWeightGross.getField());
        moFields.addField(moCompQuantityCage.getField());
        //moFields.addField(moCompWeightCage.getField());
        moFields.addField(moCompWeightPallet.getField());
        //moFields.addField(moCompWeightNet_r.getField());
        moFields.addField(moCurPriceUnitary.getField());
        //moFields.addField(moCurTotal_r.getField());
        //moFields.addField(moCurPayments.getField());
        //moFields.addField(moCurBalance.getField());
        moFields.addField(moCurPayment.getField());
        //moFields.addField(moCurBalanceNew.getField());
        moFields.addField(moBoolPrintOnSave);

        moFields.setFormButton(jbSave);

        moConfig = (SDbConfig) miClient.getSession().getConfigSystem();
        mbCanEditPriceUnitary = miClient.getSession().getUser().isAdministrator();

        jlWeightCageUnitary.setText("(" + SLibUtils.getDecimalFormatQuantity().format(moConfig.getWeightCageUnitary()) + " " + SOpeConsts.KG + "/" + SOpeConsts.PCE + ")");
    }

    private void computeBalance() {
        moCurBalance.getField().setValue(SLibUtils.round(moCurTotal_r.getField().getValue() -
                moCurPayments.getField().getValue(),
                SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
        moCurBalanceNew.getField().setValue(SLibUtils.round(moCurPayment.getField().getValue() -
                moCurBalance.getField().getValue(),
                SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
    }

    private void computeTotal() {
        moCurTotal_r.getField().setValue(SLibUtils.round(moCurPriceUnitary.getField().getValue() * moCompWeightNet_r.getField().getValue(),
                SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
        computeBalance();
    }

    private void computeWeightNet() {
        moCompWeightCage.getField().setValue(moCompQuantityCage.getField().getValue() * moConfig.getWeightCageUnitary());
        moCompWeightNet_r.getField().setValue(moCompWeightGross.getField().getValue() -
                moCompWeightCage.getField().getValue() -
                moCompWeightPallet.getField().getValue());
        computeTotal();
    }

    private void setEditableStatusPriceUnitary() {
        if (moKeyItem.getSelectedIndex() <= 0) {
            moCurPriceUnitary.setEditable(false);
        }
        else {
            moCurPriceUnitary.setEditable(mbCanEditPriceUnitary || moCurPriceUnitary.getField().getValue() == 0);
        }
    }

    private void actionSetWeightGrossSystem() {
        double weight = 0;

        try {
            weight = SGuiDaemonWeight.parseWeight(jtfScale.getText());
            moCompWeightGrossSystem.getField().setValue(weight);
            moCompWeightGross.getField().setValue(weight);
            moCompWeightGross.getField().getComponent().requestFocus();
            computeWeightNet();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionPayBalance() {
        moCurPayment.getField().setValue(moCurBalance.getField().getValue());
        moCurPayment.getField().getComponent().requestFocus();
        computeBalance();
    }

    private void itemStateItem() {
        SDbItem item = null;

        if (moKeyItem.getSelectedIndex() <= 0) {
            moCurPriceUnitary.getField().setValue(0d);
        }
        else {
            item = (SDbItem) miClient.getSession().readRegistry(SModConsts.OU_ITM, moKeyItem.getValue());
            moCurPriceUnitary.getField().setValue(item.getPriceUnitary());
        }

        setEditableStatusPriceUnitary();
        computeTotal();
    }

    private void itemStateSupplier() {
        SDbSupplier supplier = null;

        if (moKeySupplier.getSelectedIndex() == 0) {
            moKeyLocality.setSelectedIndex(0);
        }
        else {
            supplier = (SDbSupplier) miClient.getSession().readRegistry(SModConsts.OU_SUP, moKeySupplier.getValue());
            moKeyLocality.setValue(new int[] { supplier.getFkLocalityId() });
        }
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public void windowClosed() {
        super.windowClosed();

        if (moDaemonWeight != null) {
            if (moDaemonWeight.isActive()) {
                moDaemonWeight.stopDaemon();
            }
        }

        if (moSerialPortListener != null) {
            if (moSerialPortListener.isListening()) {
                try {
                    moSerialPortListener.closeListener();
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
            }
        }
    }

    @Override
    public void addAllListeners() {
        jbSetWeightGrossSystem.addActionListener(this);
        jbPayBalance.addActionListener(this);
        moKeyItem.addItemListener(this);
        moKeySupplier.addItemListener(this);
        moCompWeightGross.getField().getComponent().addFocusListener(this);
        moCompQuantityCage.getField().getComponent().addFocusListener(this);
        moCompWeightPallet.getField().getComponent().addFocusListener(this);
        moCurPriceUnitary.getField().getComponent().addFocusListener(this);
        moCurPayment.getField().getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbSetWeightGrossSystem.removeActionListener(this);
        jbPayBalance.removeActionListener(this);
        moKeyItem.removeItemListener(this);
        moKeySupplier.removeItemListener(this);
        moCompWeightGross.getField().getComponent().removeFocusListener(this);
        moCompQuantityCage.getField().getComponent().removeFocusListener(this);
        moCompWeightPallet.getField().getComponent().removeFocusListener(this);
        moCurPriceUnitary.getField().getComponent().removeFocusListener(this);
        moCurPayment.getField().getComponent().removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.OU_ITM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeySupplier, SModConsts.OU_SUP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyLocality, SModConsts.OU_LOC, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbWeighing) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setDate(miClient.getSession().getCurrentDate());
            moRegistry.setFkItemId(moConfig.getFkDefaultItemId_n());
            moRegistry.setFkSupplierId(moConfig.getFkDefaultSupplierId_n());
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moDateDate.setValue(moRegistry.getDate());
        moIntNumber.setValue(moRegistry.getNumber());

        moKeyItem.setValue(new int[] { moRegistry.getFkItemId() });
        if (moRegistry.isRegistryNew()) {
            itemStateItem();
        }
        else {
            moCurPriceUnitary.getField().setValue(moRegistry.getPriceUnitary());
        }

        moKeySupplier.setValue(new int[] { moRegistry.getFkSupplierId() });
        if (moRegistry.isRegistryNew()) {
            itemStateSupplier();
        }
        else {
            moKeyLocality.setValue(new int[] { moRegistry.getFkLocalityId() });
        }

        moTextNotes.setValue(moRegistry.getNotes());
        moTextNotesOnDelete.setValue(moRegistry.getNotesOnDelete());
        moCompWeightGrossSystem.getField().setValue(moRegistry.getWeightGrossSystem());
        moCompWeightGross.getField().setValue(moRegistry.getWeightGross());
        moCompQuantityCage.getField().setValue(moRegistry.getQuantityCage());
        moCompWeightCage.getField().setValue(moRegistry.getWeightCage());
        moCompWeightPallet.getField().setValue(moRegistry.getWeightPallet());
        moCompWeightNet_r.getField().setValue(moRegistry.getWeightNet_r());
        moCurTotal_r.getField().setValue(moRegistry.getTotal_r());
        moCurPayment.getField().setValue(moRegistry.getRegPayment() == null ? 0d : moRegistry.getRegPayment().getPayment());

        try {
            moCurPayments.getField().setValue(SOpeUtils.getWeighingOtherPayments(miClient.getSession(), moRegistry.getPkWeighingId()));
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }

        jckPayed.setSelected(moRegistry.isPayed());
        jckDisabled.setSelected(moRegistry.isDisabled());
        jckDeleted.setSelected(moRegistry.isDeleted());

        computeBalance();

        moBoolPrintOnSave.setValue(true);

        setFormEditable(true);
        addAllListeners();

        setEditableStatusPriceUnitary();
        jlNotesOnDelete.setEnabled(moRegistry.isDisabled() || moRegistry.isDeleted());
        moTextNotesOnDelete.setEnabled(moRegistry.isDisabled() || moRegistry.isDeleted());

        if (moConfig.isDevelopment()) {
            // Development environment, assuming no serial port available:

            if (moDaemonWeight != null && moDaemonWeight.isActive()) {
                moDaemonWeight.stopDaemon();
            }

            moDaemonWeight = new SGuiDaemonWeight(jtfScale);
            moDaemonWeight.startDaemon();
        }
        else {
            // Producton environment, assuming serial port available:

            if (moSerialPortListener != null && moSerialPortListener.isListening()) {
                try {
                    moSerialPortListener.closeListener();
                }
                catch (Exception e) {
                    SLibUtils.printException(this, e);
                }
            }

            moSerialPortListener = new SGuiSerialPortListener("COM1", jtfScale);
        }

    }

    @Override
    public SDbWeighing getRegistry() throws Exception {
        SDbWeighing registry = moRegistry.clone();
        SDbPayment payment = null;

        if (registry.isRegistryNew()) {}

        registry.setDate(moDateDate.getValue());
        registry.setNumber(moIntNumber.getValue());
        registry.setQuantityCage(moCompQuantityCage.getField().getValue());
        registry.setWeightGrossSystem(moCompWeightGrossSystem.getField().getValue());
        registry.setWeightGross(moCompWeightGross.getField().getValue());
        registry.setWeightCage(moCompWeightCage.getField().getValue());
        registry.setWeightPallet(moCompWeightPallet.getField().getValue());
        //registry.setWeightNet_r(...);
        registry.setPriceUnitary(moCurPriceUnitary.getField().getValue());
        //registry.setTotal_r(...);
        registry.setNotes(moTextNotes.getValue());
        registry.setNotesOnDelete(moTextNotesOnDelete.getValue());
        //registry.setPayed(...);
        //registry.setDisabled(...);
        //registry.setDeleted(...);
        //registry.setSystem(...);
        registry.setFkItemId(moKeyItem.getValue()[0]);
        registry.setFkSupplierId(moKeySupplier.getValue()[0]);
        registry.setFkLocalityId(moKeyLocality.getValue()[0]);

        payment = registry.getRegPayment();

        if (payment == null) {
            payment = new SDbPayment();
            registry.setRegPayment(payment);
        }

        payment.setPayment(moCurPayment.getField().getValue());

        if (moBoolPrintOnSave.getValue()) {
            registry.setPostSaveTarget(registry);
            registry.setPostSaveMethod(registry.getClass().getMethod("printWeighing", SGuiClient.class));
            registry.setPostSaveMethodArgs(new Object[] { miClient });
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (!SOpeUtils.isPeriodOpen(miClient.getSession(), moDateDate.getValue())) {
                validation.setMessage(SUtilConsts.ERR_MSG_DOC_PER_CLO);
                validation.setComponent(moDateDate);
            }
            else if (moCompWeightGrossSystem.getField().getValue() < 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlWeightGrossSystem) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_GREAT_EQUAL + SLibUtils.getDecimalFormatQuantity().format(0) + " " + SOpeConsts.KG + ".");
                validation.setComponent(jbSetWeightGrossSystem);
            }
            else if (moCompWeightGrossSystem.getField().getValue() == 0) {
                if (miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlWeightGrossSystem) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + SLibUtils.getDecimalFormatQuantity().format(0) + " " + SOpeConsts.KG + "?") != JOptionPane.YES_OPTION) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlWeightGrossSystem) + "'.");
                    validation.setComponent(jbSetWeightGrossSystem);
                }
            }

            if (validation.isValid()) {
                if (moCompWeightGross.getField().getValue() - moCompWeightGrossSystem.getField().getValue() != 0) {
                    if (miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlWeightGross) + "'" + SGuiConsts.MSG_CNF_FIELD_VAL_DIF_FIELD + "'" + SGuiUtils.getLabelName(jlWeightGrossSystem) + "' por " + SLibUtils.getDecimalFormatQuantity().format(moCompWeightGross.getField().getValue() - moCompWeightGrossSystem.getField().getValue()) + " " + SOpeConsts.KG + "?") != JOptionPane.YES_OPTION) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ_EQUAL + "'" + SGuiUtils.getLabelName(jlWeightGross) + "' y '" + SGuiUtils.getLabelName(jlWeightGrossSystem) + "'.");
                        validation.setComponent(moCompWeightGross.getField().getComponent());
                    }
                }

                if (validation.isValid()) {
                    if (moCompWeightNet_r.getField().getValue() <= 0) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlWeightNet_r) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_GREAT + SLibUtils.getDecimalFormatQuantity().format(0) + " " + SOpeConsts.KG + ".");
                        validation.setComponent(moCompWeightGross.getField().getComponent());
                    }
                    else {
                        if (moCurPriceUnitary.getField().getValue() == 0) {
                            if (miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlPriceUnitary) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + SLibUtils.getDecimalFormatAmount().format(0) + " " + miClient.getSession().getSessionCustom().getLocalCurrencyCode() + "?") != JOptionPane.YES_OPTION) {
                                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlPriceUnitary) + "'.");
                                if (moCurPriceUnitary.isEditable()) {
                                    validation.setComponent(moCurPriceUnitary.getField().getComponent());
                                }
                            }
                        }

                        if (validation.isValid()) {
                            if (moCurTotal_r.getField().getValue() < 0) {
                                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlTotal_r) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_GREAT_EQUAL + SLibUtils.getDecimalFormatAmount().format(0) + " " + miClient.getSession().getSessionCustom().getLocalCurrencyCode() + ".");
                                if (moCurPriceUnitary.isEditable()) {
                                    validation.setComponent(moCurPriceUnitary.getField().getComponent());
                                }
                            }
                            else {
                                if (moCurBalance.getField().getValue() > 0 && moCurPayment.getField().getValue() == 0) {
                                    if (miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlPayment) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + SLibUtils.getDecimalFormatAmount().format(0) + " " + miClient.getSession().getSessionCustom().getLocalCurrencyCode() + "?") != JOptionPane.YES_OPTION) {
                                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlPayment) + "'.");
                                        validation.setComponent(moCurPayment.getField().getComponent());
                                    }
                                }

                                if (validation.isValid()) {
                                    if (moCurPayment.getField().getValue() != 0 && moCurPayment.getField().getValue() - moCurBalance.getField().getValue() != 0) {
                                        if (miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlPayment) + "'" + SGuiConsts.MSG_CNF_FIELD_VAL_DIF_FIELD + "'" + SGuiUtils.getLabelName(jlBalance) + "' por " + SLibUtils.getDecimalFormatAmount().format(moCurPayment.getField().getValue() - moCurBalance.getField().getValue()) + " " + miClient.getSession().getSessionCustom().getLocalCurrencyCode() + "?") != JOptionPane.YES_OPTION) {
                                            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ_EQUAL + "'" + SGuiUtils.getLabelName(jlPayment) + "' y '" + SGuiUtils.getLabelName(jlBalance) + "'.");
                                            validation.setComponent(moCurPayment.getField().getComponent());
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbSetWeightGrossSystem) {
                actionSetWeightGrossSystem();
            }
            else if (button == jbPayBalance) {
                actionPayBalance();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();

            if (field == moKeyItem) {
                itemStateItem();
            }
            else if (field == moKeySupplier) {
                itemStateSupplier();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldDecimal) {
            SBeanFieldDecimal field = (SBeanFieldDecimal) e.getSource();

            if (field == moCompWeightGross.getField() || field == moCompQuantityCage.getField() || field == moCompWeightPallet.getField()) {
                computeWeightNet();
            }
            else if (field == moCurPriceUnitary.getField()) {
                computeTotal();
            }
            else if (field == moCurPayment.getField()) {
                computeBalance();
            }
        }
    }
}
