/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package scale.gui;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.HashMap;
import java.util.TimeZone;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JToggleButton;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import sa.gui.util.SUtilConfigXml;
import sa.gui.util.SUtilConsts;
import sa.gui.util.SUtilLoginDlg;
import sa.gui.util.SUtilPasswordDlg;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbDatabase;
import sa.lib.db.SDbDatabaseMonitor;
import sa.lib.grid.SGridPaneView;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiDatePicker;
import sa.lib.gui.SGuiDateRangePicker;
import sa.lib.gui.SGuiSession;
import sa.lib.gui.SGuiUserGui;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiYearMonthPicker;
import sa.lib.gui.SGuiYearPicker;
import sa.lib.gui.bean.SBeanDialogReport;
import sa.lib.gui.bean.SBeanForm;
import sa.lib.gui.bean.SBeanFormDialog;
import sa.lib.gui.bean.SBeanFormProcess;
import sa.lib.gui.bean.SBeanOptionPicker;
import sa.lib.img.SImgConsts;
import sa.lib.xml.SXmlUtils;
import scale.mod.SModConsts;
import scale.mod.SModModuleCfg;
import scale.mod.SModModuleOpe;
import scale.mod.SModUtils;
import scale.mod.ope.db.SDbConfig;
import scale.mod.ope.db.SDbUser;
import scale.mod.ope.db.SDbUserGui;

/**
 *
 * @author Sergio Flores
 */
public class SGuiClientApp extends JFrame implements SGuiClient, ActionListener {

    public static final String APP_NAME = "SCALE 1.0";
    public static final String APP_RELEASE = "SCALE 1.0 001.03";
    public static final String APP_COPYRIGHT = "© 2013 Software Aplicado SA de CV. Todos los derechos reservados.";
    public static final String APP_PROVIDER = "www.swaplicado.com.mx";

    private int mnTerminal;
    private boolean mbFirstActivation;
    private boolean mbLoggedIn;
    private SGuiSession moSession;
    private SUtilConfigXml moConfigXml;
    private SDbDatabase moSysDatabase;
    private SDbDatabaseMonitor moSysDatabaseMonitor;
    private Statement miSysStatement;
    private String msCompany;

    private SGuiDatePicker moDatePicker;
    private SGuiDateRangePicker moDateRangePicker;
    private SGuiYearPicker moYearPicker;
    private SGuiYearMonthPicker moYearMonthPicker;
    private JFileChooser moFileChooser;
    private ImageIcon moIcon;
    private ImageIcon moIconCloseActive;
    private ImageIcon moIconCloseInactive;
    private ImageIcon moIconCloseBright;
    private ImageIcon moIconCloseDark;

    /**
     * Creates new form SGuiClient
     */
    public SGuiClientApp() {
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgModules = new javax.swing.ButtonGroup();
        jtbToolbar = new javax.swing.JToolBar();
        jtbModuleCfg = new javax.swing.JToggleButton();
        jtbModuleOpe = new javax.swing.JToggleButton();
        jtpTabbedPane = new javax.swing.JTabbedPane();
        jpStatusBar = new javax.swing.JPanel();
        jtfSystemDate = new javax.swing.JTextField();
        jtfWorkingDate = new javax.swing.JTextField();
        jbWorkingDate = new javax.swing.JButton();
        jtfUser = new javax.swing.JTextField();
        jtfUserTs = new javax.swing.JTextField();
        jlAppRelease = new javax.swing.JLabel();
        jmbMenuBar = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiFileWorkingDate = new javax.swing.JMenuItem();
        jmiFileUserPassword = new javax.swing.JMenuItem();
        jsFile1 = new javax.swing.JPopupMenu.Separator();
        jmiFileCloseViewsAll = new javax.swing.JMenuItem();
        jmiFileCloseViewsOther = new javax.swing.JMenuItem();
        jsFile2 = new javax.swing.JPopupMenu.Separator();
        jmiFileCloseSession = new javax.swing.JMenuItem();
        jsFile3 = new javax.swing.JPopupMenu.Separator();
        jmiFileExit = new javax.swing.JMenuItem();
        jmView = new javax.swing.JMenu();
        jmiViewModuleCfg = new javax.swing.JMenuItem();
        jmiViewModuleOpe = new javax.swing.JMenuItem();
        jmHelp = new javax.swing.JMenu();
        jmiHelpHelp = new javax.swing.JMenuItem();
        jsHelp1 = new javax.swing.JPopupMenu.Separator();
        jmiHelpAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jtbToolbar.setFloatable(false);
        jtbToolbar.setRollover(true);

        bgModules.add(jtbModuleCfg);
        jtbModuleCfg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scale/gui/img/mod_cfg_bw.gif"))); // NOI18N
        jtbModuleCfg.setToolTipText("Módulo configuración");
        jtbModuleCfg.setFocusable(false);
        jtbModuleCfg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jtbModuleCfg.setMaximumSize(new java.awt.Dimension(64, 64));
        jtbModuleCfg.setMinimumSize(new java.awt.Dimension(64, 64));
        jtbModuleCfg.setPreferredSize(new java.awt.Dimension(64, 64));
        jtbModuleCfg.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/scale/gui/img/mod_cfg.gif"))); // NOI18N
        jtbModuleCfg.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/scale/gui/img/mod_cfg.gif"))); // NOI18N
        jtbModuleCfg.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtbToolbar.add(jtbModuleCfg);

        bgModules.add(jtbModuleOpe);
        jtbModuleOpe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scale/gui/img/mod_seed_bw.gif"))); // NOI18N
        jtbModuleOpe.setToolTipText("Módulo operaciones");
        jtbModuleOpe.setFocusable(false);
        jtbModuleOpe.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jtbModuleOpe.setMaximumSize(new java.awt.Dimension(64, 64));
        jtbModuleOpe.setMinimumSize(new java.awt.Dimension(64, 64));
        jtbModuleOpe.setPreferredSize(new java.awt.Dimension(64, 64));
        jtbModuleOpe.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/scale/gui/img/mod_seed.gif"))); // NOI18N
        jtbModuleOpe.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/scale/gui/img/mod_seed.gif"))); // NOI18N
        jtbModuleOpe.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtbToolbar.add(jtbModuleOpe);

        getContentPane().add(jtbToolbar, java.awt.BorderLayout.NORTH);
        getContentPane().add(jtpTabbedPane, java.awt.BorderLayout.CENTER);

        jpStatusBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jtfSystemDate.setEditable(false);
        jtfSystemDate.setText("00/00/0000");
        jtfSystemDate.setToolTipText("Fecha de sistema");
        jtfSystemDate.setFocusable(false);
        jtfSystemDate.setPreferredSize(new java.awt.Dimension(65, 23));
        jpStatusBar.add(jtfSystemDate);

        jtfWorkingDate.setEditable(false);
        jtfWorkingDate.setText("00/00/0000");
        jtfWorkingDate.setToolTipText("Fecha de trabajo");
        jtfWorkingDate.setFocusable(false);
        jtfWorkingDate.setPreferredSize(new java.awt.Dimension(65, 23));
        jpStatusBar.add(jtfWorkingDate);

        jbWorkingDate.setText("jButton1");
        jbWorkingDate.setToolTipText("Cambiar fecha de trabajo");
        jbWorkingDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jpStatusBar.add(jbWorkingDate);

        jtfUser.setEditable(false);
        jtfUser.setText("TEXT");
        jtfUser.setToolTipText("Usuario");
        jtfUser.setFocusable(false);
        jtfUser.setPreferredSize(new java.awt.Dimension(100, 23));
        jpStatusBar.add(jtfUser);

        jtfUserTs.setEditable(false);
        jtfUserTs.setText("00/00/0000 00.00.00 +0000");
        jtfUserTs.setToolTipText("Marca de tiempo de acceso");
        jtfUserTs.setFocusable(false);
        jtfUserTs.setPreferredSize(new java.awt.Dimension(150, 23));
        jpStatusBar.add(jtfUserTs);

        jlAppRelease.setText("RELEASE");
        jlAppRelease.setPreferredSize(new java.awt.Dimension(100, 20));
        jpStatusBar.add(jlAppRelease);

        getContentPane().add(jpStatusBar, java.awt.BorderLayout.SOUTH);

        jmFile.setText("Archivo");

        jmiFileWorkingDate.setText("Cambiar fecha de trabajo...");
        jmFile.add(jmiFileWorkingDate);

        jmiFileUserPassword.setText("Cambiar contraseña...");
        jmFile.add(jmiFileUserPassword);
        jmFile.add(jsFile1);

        jmiFileCloseViewsAll.setText("Cerrar todas las vistas");
        jmFile.add(jmiFileCloseViewsAll);

        jmiFileCloseViewsOther.setText("Cerrar las otras vistas");
        jmFile.add(jmiFileCloseViewsOther);
        jmFile.add(jsFile2);

        jmiFileCloseSession.setText("Cerrar sesión de usuario");
        jmFile.add(jmiFileCloseSession);
        jmFile.add(jsFile3);

        jmiFileExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jmiFileExit.setText("Salir");
        jmFile.add(jmiFileExit);

        jmbMenuBar.add(jmFile);

        jmView.setText("Ver");

        jmiViewModuleCfg.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        jmiViewModuleCfg.setText("Ver módulo configuración");
        jmView.add(jmiViewModuleCfg);

        jmiViewModuleOpe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        jmiViewModuleOpe.setText("Ver módulo operaciones");
        jmView.add(jmiViewModuleOpe);

        jmbMenuBar.add(jmView);

        jmHelp.setText("Ayuda");

        jmiHelpHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jmiHelpHelp.setText("Ayuda");
        jmiHelpHelp.setEnabled(false);
        jmHelp.add(jmiHelpHelp);
        jmHelp.add(jsHelp1);

        jmiHelpAbout.setText("Acerca de...");
        jmiHelpAbout.setEnabled(false);
        jmHelp.add(jmiHelpAbout);

        jmbMenuBar.add(jmHelp);

        setJMenuBar(jmbMenuBar);

        setSize(new java.awt.Dimension(1016, 639));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        windowClosing();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            SLibUtils.showException(SGuiClient.class.getName(), e);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
               new SGuiClientApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgModules;
    private javax.swing.JButton jbWorkingDate;
    private javax.swing.JLabel jlAppRelease;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmHelp;
    private javax.swing.JMenu jmView;
    private javax.swing.JMenuBar jmbMenuBar;
    private javax.swing.JMenuItem jmiFileCloseSession;
    private javax.swing.JMenuItem jmiFileCloseViewsAll;
    private javax.swing.JMenuItem jmiFileCloseViewsOther;
    private javax.swing.JMenuItem jmiFileExit;
    private javax.swing.JMenuItem jmiFileUserPassword;
    private javax.swing.JMenuItem jmiFileWorkingDate;
    private javax.swing.JMenuItem jmiHelpAbout;
    private javax.swing.JMenuItem jmiHelpHelp;
    private javax.swing.JMenuItem jmiViewModuleCfg;
    private javax.swing.JMenuItem jmiViewModuleOpe;
    private javax.swing.JPanel jpStatusBar;
    private javax.swing.JPopupMenu.Separator jsFile1;
    private javax.swing.JPopupMenu.Separator jsFile2;
    private javax.swing.JPopupMenu.Separator jsFile3;
    private javax.swing.JPopupMenu.Separator jsHelp1;
    private javax.swing.JToggleButton jtbModuleCfg;
    private javax.swing.JToggleButton jtbModuleOpe;
    private javax.swing.JToolBar jtbToolbar;
    private javax.swing.JTextField jtfSystemDate;
    private javax.swing.JTextField jtfUser;
    private javax.swing.JTextField jtfUserTs;
    private javax.swing.JTextField jtfWorkingDate;
    private javax.swing.JTabbedPane jtpTabbedPane;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        int result = SLibConsts.UNDEFINED;
        String xml = "";
        TimeZone zone = null;

        mbFirstActivation = true;

        setExtendedState(Frame.MAXIMIZED_BOTH);

        SBeanForm.OwnerFrame = this;
        SBeanFormDialog.OwnerFrame = this;
        SBeanFormProcess.OwnerFrame = this;
        SBeanOptionPicker.OwnerFrame = this;
        SBeanDialogReport.OwnerFrame = this;

        logout();

        try {
            xml = SXmlUtils.readXml(SUtilConsts.FILE_NAME_CFG);
            moConfigXml = new SUtilConfigXml();
            moConfigXml.processXml(xml);

            zone = SLibUtils.createTimeZone(TimeZone.getDefault(), TimeZone.getTimeZone((String) moConfigXml.getAttribute(SUtilConfigXml.ATT_TIME_ZONE).getValue()));
            SLibUtils.restoreDateFormats(zone);
            TimeZone.setDefault(zone);

            moSysDatabase = new SDbDatabase(SDbConsts.DBMS_MYSQL);
            result = moSysDatabase.connect(
                    (String) moConfigXml.getAttribute(SUtilConfigXml.ATT_DB_HOST).getValue(),
                    (String) moConfigXml.getAttribute(SUtilConfigXml.ATT_DB_PORT).getValue(),
                    (String) moConfigXml.getAttribute(SUtilConfigXml.ATT_DB_NAME).getValue(),
                    (String) moConfigXml.getAttribute(SUtilConfigXml.ATT_USR_NAME).getValue(),
                    (String) moConfigXml.getAttribute(SUtilConfigXml.ATT_USR_PSWD).getValue());

            if (result != SDbConsts.CONNECTION_OK) {
                throw new Exception(SDbConsts.ERR_MSG_DB_CONNECTION);
            }
            else {
                moSysDatabaseMonitor = new SDbDatabaseMonitor(moSysDatabase);
                moSysDatabaseMonitor.startThread();

                miSysStatement = moSysDatabase.getConnection().createStatement();
            }

            mnTerminal = SLibUtils.parseInt((String) moConfigXml.getAttribute(SUtilConfigXml.ATT_TERMINAL).getValue());

            moDatePicker = new SGuiDatePicker(this, SGuiConsts.DATE_PICKER_DATE);
            moDateRangePicker = new SGuiDateRangePicker(this);
            moYearPicker = new SGuiYearPicker(this);
            moYearMonthPicker = new SGuiYearMonthPicker(this);
            moFileChooser = new JFileChooser();
            moIcon = new ImageIcon("/sa/gui/img/sa.gif");
            moIconCloseActive = new ImageIcon("/sa/lib/img/gui_close.png");
            moIconCloseInactive = new ImageIcon("/sa/lib/img/gui_close_ina.png");
            moIconCloseBright = new ImageIcon("/sa/lib/img/gui_close_bri.png");
            moIconCloseDark = new ImageIcon("/sa/lib/img/gui_close_dar.png");

            setIconImage(moIcon.getImage());
            jlAppRelease.setText(APP_RELEASE);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
            actionFileExit();
        }

        jbWorkingDate.addActionListener(this);

        jtbModuleCfg.addActionListener(this);
        jtbModuleOpe.addActionListener(this);

        jmiFileWorkingDate.addActionListener(this);
        jmiFileUserPassword.addActionListener(this);
        jmiFileCloseViewsAll.addActionListener(this);
        jmiFileCloseViewsOther.addActionListener(this);
        jmiFileCloseSession.addActionListener(this);
        jmiFileExit.addActionListener(this);
        jmiViewModuleCfg.addActionListener(this);
        jmiViewModuleOpe.addActionListener(this);
        jmiHelpHelp.addActionListener(this);
        jmiHelpAbout.addActionListener(this);
    }

    private void windowActivated() {
        if (mbFirstActivation){
            mbFirstActivation = false;
            login();
        }
    }

    private void windowClosing() {
        if (mbLoggedIn) {
            logout();
        }
    }

    private void renderMenues(JMenu[] menues) {
        jmbMenuBar.removeAll();
        validate();

        jmbMenuBar.add(jmFile);
        jmbMenuBar.add(jmView);

        if (menues != null) {
            for (JMenu menu : menues) {
                jmbMenuBar.add(menu);
            }
        }

        jmbMenuBar.add(jmHelp);
        validate();
    }

    private void renderClientSession(SGuiClientSessionCustom clientSession) {

    }

    private void logout() {
        renderMenues(null);
        actionFileCloseViewAll();

        mbLoggedIn = false;
        moSession = null;

        msCompany = "";
        setTitle(APP_NAME);

        jtfUserTs.setText("");
        jtfSystemDate.setText("");
        jtfUser.setText("");
        jtfWorkingDate.setText("");
        renderClientSession(null);

        jmFile.setEnabled(false);
        jmView.setEnabled(false);
        jmHelp.setEnabled(false);
        jmiFileWorkingDate.setEnabled(false);
        jmiViewModuleCfg.setEnabled(false);
        jmiViewModuleOpe.setEnabled(false);
        jbWorkingDate.setEnabled(false);
        jtbModuleCfg.setEnabled(false);
        jtbModuleOpe.setEnabled(false);
        bgModules.clearSelection();
    }

    private void login() {
        int modules = 0;
        String sql = "";
        ResultSet resultSet;
        Date date;
        SDbUser user;
        SDbConfig config = null;
        SUtilLoginDlg loginDlg = new SUtilLoginDlg(this, "id_com", "com");
        JToggleButton defaultToggleButton = null;

        loginDlg.setVisible(true);

        if (loginDlg.getFormResult() != SGuiConsts.FORM_RESULT_OK) {
            actionFileExit();
        }
        else {
            try {
                SGuiUtils.setCursorWait(this);

                // Get system date:

                sql = "SELECT NOW() ";
                resultSet = miSysStatement.executeQuery(sql);
                if (!resultSet.next()) {
                    throw new Exception (SUtilConsts.ERR_MSG_SYS_DATE);
                }
                else {
                    date = resultSet.getTimestamp(1);
                }

                mbLoggedIn = true;
                moSession = new SGuiSession(this);
                moSession.setSystemDate(date);
                moSession.setCurrentDate(date);
                moSession.setUserTs(date);
                moSession.setDatabase(loginDlg.getDatabase());

                user = new SDbUser();
                user.read(moSession, loginDlg.getUserKey());

                config = new SDbConfig();
                config.read(moSession, new int[] { SUtilConsts.BPR_CO_ID });

                moSession.setConfigSystem(config);
                moSession.setConfigCompany(null);
                moSession.setConfigBranch(null);
                moSession.setUser(user);
                moSession.setModuleUtils(new SModUtils());
                moSession.getModules().add(new SModModuleCfg(this));
                moSession.getModules().add(new SModModuleOpe(this));

                //user.computeAccess(moSession);    // not implemented yet!
                moSession.setSessionCustom(user.createSessionCustom(this, mnTerminal));

                msCompany = loginDlg.getCompany();
                setTitle(APP_NAME + " - " + msCompany);

                jtfSystemDate.setText(SLibUtils.DateFormatDate.format(moSession.getSystemDate()));
                jtfWorkingDate.setText(SLibUtils.DateFormatDate.format(moSession.getCurrentDate()));
                jtfUser.setText(user.getName());
                jtfUserTs.setText(SLibUtils.DateFormatDatetimeTimeZone.format(moSession.getUserTs()));

                jmFile.setEnabled(true);
                jmView.setEnabled(true);
                jmHelp.setEnabled(true);

                jbWorkingDate.setEnabled(true);

                if (user.hasModuleAccess(SModConsts.MOD_CFG)) {
                    modules++;
                    jtbModuleCfg.setEnabled(true);
                    if (defaultToggleButton == null) {
                        defaultToggleButton = jtbModuleCfg;
                    }
                }

                if (user.hasModuleAccess(SModConsts.MOD_OPE)) {
                    modules++;
                    jtbModuleOpe.setEnabled(true);
                    if (defaultToggleButton == null) {
                        defaultToggleButton = jtbModuleOpe;
                    }
                }

                jmiFileWorkingDate.setEnabled(jbWorkingDate.isEnabled());
                jmiViewModuleCfg.setEnabled(jtbModuleCfg.isEnabled());
                jmiViewModuleOpe.setEnabled(jtbModuleOpe.isEnabled());

                renderClientSession((SGuiClientSessionCustom) moSession.getSessionCustom());

                if (defaultToggleButton != null) {
                    defaultToggleButton.requestFocus();
                }

                if (modules == 1) {
                    defaultToggleButton.doClick();
                }

                SGuiUtils.setCursorDefault(this);
            }
            catch(SQLException e) {
                SGuiUtils.setCursorDefault(this);
                SLibUtils.showException(this, e);
                actionFileExit();
            }
            catch(Exception e) {
                SGuiUtils.setCursorDefault(this);
                SLibUtils.showException(this, e);
                actionFileExit();
            }
        }
    }

    public void actionToggleViewModule(int type, int subtype) {
        renderMenues(moSession.getModule(type, subtype).getMenus());
    }

    public void actionFileWorkingDate() {
        moDatePicker.resetPicker();
        moDatePicker.setOption(moSession.getCurrentDate());
        moDatePicker.setVisible(true);

        if (moDatePicker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            moSession.setCurrentDate(moDatePicker.getOption());
            jtfWorkingDate.setText(SLibUtils.DateFormatDate.format(moSession.getCurrentDate()));
        }
    }

    public void actionFileUserPassword() {
        new SUtilPasswordDlg(this).setVisible(true);
    }

    public void actionFileCloseViewAll() {
        try {
            SGuiUtils.setCursorWait(this);

            for (int i = 0; i < jtpTabbedPane.getTabCount(); i++) {
                ((SGridPaneView) jtpTabbedPane.getComponentAt(i)).paneViewClosed();
            }

            jtpTabbedPane.removeAll();
        }
        catch(Exception e) {
            SLibUtils.showException(this, e);
        }
        finally {
            SGuiUtils.setCursorDefault(this);
        }
    }

    public void actionFileCloseViewOther() {
        int i = 0;
        int index = jtpTabbedPane.getSelectedIndex();

        try {
            SGuiUtils.setCursorWait(this);

            for (i = jtpTabbedPane.getTabCount() - 1; i > index; i--) {
                ((SGridPaneView) jtpTabbedPane.getComponentAt(i)).paneViewClosed();  // this preserves view user settings
                jtpTabbedPane.removeTabAt(i);
            }

            for (i = 0; i < index; i++) {
                ((SGridPaneView) jtpTabbedPane.getComponentAt(0)).paneViewClosed();  // this preserves view user settings
                jtpTabbedPane.removeTabAt(0);
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        finally {
            SGuiUtils.setCursorDefault(this);
        }
    }

    public void actionFileCloseSession() {
        logout();
        login();
    }

    private void actionFileExit() {
        logout();
        System.exit(0);
    }

    public void actionHelpHelp() {

    }

    public void actionHelpAbout() {

    }

    @Override
    public JFrame getFrame() {
        return this;
    }

    @Override
    public JTabbedPane getTabbedPane() {
        return jtpTabbedPane;
    }

    @Override
    public SGuiSession getSession() {
        return moSession;
    }

    @Override
    public SDbDatabase getSysDatabase() {
        return moSysDatabase;
    }

    @Override
    public Statement getSysStatement() {
        return miSysStatement;
    }

    @Override
    public SGuiDatePicker getDatePicker() {
        return moDatePicker;
    }

    @Override
    public SGuiDateRangePicker getDateRangePicker() {
        return moDateRangePicker;
    }

    @Override
    public SGuiYearPicker getYearPicker() {
        return moYearPicker;
    }

    @Override
    public SGuiYearMonthPicker getYearMonthPicker() {
        return moYearMonthPicker;
    }

    @Override
    public JFileChooser getFileChooser() {
        return moFileChooser;
    }

    @Override
    public ImageIcon getImageIcon(int icon) {
        ImageIcon imageIcon = null;

        switch(icon) {
            case SImgConsts.ICO_GUI_CLOSE:
                imageIcon = moIconCloseActive;
                break;
            case SImgConsts.ICO_GUI_CLOSE_INA:
                imageIcon = moIconCloseInactive;
                break;
            case SImgConsts.ICO_GUI_CLOSE_BRI:
                imageIcon = moIconCloseBright;
                break;
            case SImgConsts.ICO_GUI_CLOSE_DAR:
                imageIcon = moIconCloseDark;
                break;
            default:
                showMsgBoxError(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return imageIcon;
    }

    @Override
    public SGuiUserGui readUserGui(int[] key) {
        SDbUserGui userGui = new SDbUserGui();

        try {
            userGui.read(moSession, key);
        }
        catch (SQLException e) {
            userGui = null;
            SLibUtils.printException(this, e);
        }
        catch (Exception e) {
            userGui = null;
            SLibUtils.printException(this, e);
        }

        return userGui;
    }

    @Override
    public SGuiUserGui saveUserGui(int[] key, String gui) {
        SDbUserGui userGui = (SDbUserGui) readUserGui(key);

        if (userGui == null) {
            userGui = new SDbUserGui();
            userGui.setPrimaryKey(key);
        }

        try {
            userGui.setGui(gui);
            userGui.save(moSession);
        }
        catch (SQLException e) {
            userGui = null;
            SLibUtils.printException(this, e);
        }
        catch (Exception e) {
            userGui = null;
            SLibUtils.printException(this, e);
        }

        return userGui;
    }

    @Override
    public HashMap<String, Object> createReportParams() {
        HashMap<String, Object> params = new HashMap<String, Object>();

        params.put("sAppName", APP_NAME);
        params.put("sAppCopyright", APP_COPYRIGHT);
        params.put("sAppProvider", APP_PROVIDER);
        params.put("sCompany", msCompany);
        params.put("sUser", moSession.getUser().getName());
        params.put("oFormatDate", SLibUtils.DateFormatDate);
        params.put("oFormatDatetime", SLibUtils.DateFormatDatetime);

        return params;
    }

    @Override
    public String getTableCompany() {
        return SModConsts.TablesMap.get(SModConsts.SU_COM);
    }

    @Override
    public String getTableUser() {
        return SModConsts.TablesMap.get(SModConsts.OU_USR);
    }

    @Override
    public String getAppName() {
        return APP_NAME;
    }

    @Override
    public String getAppRelease() {
        return APP_RELEASE;
    }

    @Override
    public String getAppCopyright() {
        return APP_COPYRIGHT;
    }

    @Override
    public String getAppProvider() {
        return APP_PROVIDER;
    }

    @Override
    public void showMsgBoxError(String msg) {
        JOptionPane.showMessageDialog(this, msg, SGuiConsts.MSG_BOX_ERROR, JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showMsgBoxWarning(String msg) {
        JOptionPane.showMessageDialog(this, msg, SGuiConsts.MSG_BOX_WARNING, JOptionPane.WARNING_MESSAGE);
    }

    @Override
    public void showMsgBoxInformation(String msg) {
        JOptionPane.showMessageDialog(this, msg, SGuiConsts.MSG_BOX_INFORMATION, JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public int showMsgBoxConfirm(String msg) {
        return JOptionPane.showConfirmDialog(this, msg, SGuiConsts.MSG_BOX_CONFIRM, JOptionPane.YES_NO_OPTION);
    }

    @Override
    public void finalize() throws Throwable {
        super.finalize();

        if (moSysDatabaseMonitor != null && moSysDatabaseMonitor.isAlive()) {
            moSysDatabaseMonitor.stopThread();
        }

        System.out.println(this.getClass().getName() + ".finalize() called!");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbWorkingDate) {
                actionFileWorkingDate();
            }
        }
        else if (e.getSource() instanceof JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (toggleButton == jtbModuleCfg) {
                actionToggleViewModule(SModConsts.MOD_CFG, SLibConsts.UNDEFINED);
            }
            else if (toggleButton == jtbModuleOpe) {
                actionToggleViewModule(SModConsts.MOD_OPE, SLibConsts.UNDEFINED);
            }
        }
        else if (e.getSource() instanceof JMenuItem) {
            JMenuItem menuItem = (JMenuItem) e.getSource();

            if (menuItem == jmiFileWorkingDate) {
                actionFileWorkingDate();
            }
            else if (menuItem == jmiFileUserPassword) {
                actionFileUserPassword();
            }
            else if (menuItem == jmiFileCloseViewsAll) {
                actionFileCloseViewAll();
            }
            else if (menuItem == jmiFileCloseViewsOther) {
                actionFileCloseViewOther();
            }
            else if (menuItem == jmiFileCloseSession) {
                actionFileCloseSession();
            }
            else if (menuItem == jmiFileExit) {
                actionFileExit();
            }
            else if (menuItem == jmiViewModuleCfg) {
                jtbModuleCfg.doClick();
                jtbModuleCfg.requestFocus();
            }
            else if (menuItem == jmiViewModuleOpe) {
                jtbModuleOpe.doClick();
                jtbModuleOpe.requestFocus();
            }
            else if (menuItem == jmiHelpHelp) {
                actionHelpHelp();
            }
            else if (menuItem == jmiHelpAbout) {
                actionHelpAbout();
            }
        }
    }

    @Override
    public void computeSessionSettings() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void preserveSessionSettings() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
